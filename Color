/**
 * Color.cpp
 * Project UID 2e6ea4e086ea6a06753e819c30923369
 *
 * EECS 183
 * Project 4: CoolPics
 *
 * <#Name(s)#>
 * <#uniqname(s)#>
 *
 * <#Description#>
 */

#include "Color.h"

// TODO: implement first checkRange, then two constructors, setRed, getRed,
//       setGreen, getGreen, setBlue, getBlue, read, write.
Color::Color() {
	blue = 0;
	red = 0;
	green = 0;
}

Color::Color(int redVal, int greenVal, int blueVal) {
	red = redVal;
		green = greenVal;
		blue = blueVal;
}

void Color::setRed(int redVal) {
	if (redVal < 0) {
		redVal = 0;
	}
	else if (redVal > 255) {
		redVal = 255;
	}
	red = redVal;
}

int Color::getRed() {
	return red;
}

void Color::setGreen(int greenVal) {
	if (greenVal < 0) {
		greenVal = 0;
	}
	else if (greenVal > 255) {
		greenVal = 255;
	}
	green = greenVal;
}

int Color::getGreen() {
	return green;
}

void Color::setBlue(int blueVal) {
	if (blueVal < 0) {
		blueVal = 0;
	}
	else if (blueVal > 255) {
		blueVal = 255;
	}
	blue = blueVal;
}

int Color::getBlue() {
	return blue; 
}

void Color::read(istream& ins) {
	ins >> red >> green >> blue;
}

void Color::write(ostream& outs) {
	outs << checkRange(red) << " " << checkRange(green) << " " << checkRange(blue);
}

int Color::checkRange(int val) {
	if (val < 0) {
		return 0;
	}
	else if (val > 255) {
		return 255;
	}
	return val;
}

// Your code goes above this line.
// Don't change the implementations below!

istream& operator >> (istream& ins, Color& color)
{
   color.read(ins);
   return ins;
}

ostream& operator << (ostream& outs, Color color)
{
   color.write(outs);
   return outs;
}
